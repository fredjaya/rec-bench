#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr  9 11:23:56 2020

@author: Fred Jaya

Parse empirical 3SEQ breakpoints
"""

import argparse
import pandas as pd
import re

def read_empirical_rec(rec_path):
    rec_file = pd.DataFrame([line.strip().split('\t')
                for line in open(rec_path, 'r')])
    
    new_header = rec_file.iloc[0]
    rec_file = rec_file[1:]
    rec_file.columns = new_header
    return rec_file

def bp_to_set(line):
    """ Convert 3SEQ breakpoint ranges into set of each position """
    bp_positions = set()        
    pattern = re.compile(r'\d+-\d+')
    
    paired_bp = str(list(line.iloc[12:]))
    paired_bp = re.findall(pattern, paired_bp)
      
    for ind_range in paired_bp:
        split_bp = re.split('-', ind_range)
        ind_bp = list(range(int(split_bp[0]), (int(split_bp[1]) + 1)))
            
        for bp in ind_bp:
            bp_positions.add(bp) 
    return bp_positions

def parse_file_name(rec_path):
    return rec_path + "_bp_parsed.csv"

def main(rec_path): 
    print("Reading {}...".format(rec_path))
    rec_file = read_empirical_rec(rec_path)
    for index, line in rec_file.iterrows():
        bp_positions = bp_to_set(line)
        line.breakpoints = bp_positions
    rec_file = rec_file.iloc[:,:13]
    
    out_name = parse_file_name(rec_path)
    print("Writing to {}...".format(out_name))
    rec_file.to_csv(out_name, index = False)
    return

parser = argparse.ArgumentParser()
parser.add_argument("rec_path", help = "3SEQ output files (*.rec)")
args = parser.parse_args()

main(args.rec_path)
